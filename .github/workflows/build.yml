name: Build (Windows EXE + Docker)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "pdf_batch_remove_with_previews_and_ocr.py"
      - "requirements.txt"
      - "Dockerfile"
      - "docker-compose.yml"
      - "entrypoint.sh"
      - ".github/workflows/build.yml"

jobs:
  # =======================
  # 1) Windows portable ZIP
  # =======================
  win-portable:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install -U pip wheel setuptools pyinstaller
          python -m pip install -r requirements.txt

      # Se você versionar binários em vendor\*, eles entram no ZIP automaticamente.
      # (Se quiser baixar Poppler/Tesseract aqui, adiciono passos extras depois.)
      - name: PyInstaller (onefile)
        run: |
          pyinstaller --name pdf-cleaner --onefile --console pdf_batch_remove_with_previews_and_ocr.py
          dir dist

      - name: Prepare bundle (exe + data + runner .bat)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path bundle\data\Input | Out-Null
          New-Item -ItemType Directory -Force -Path bundle\data\Output | Out-Null
          New-Item -ItemType Directory -Force -Path bundle\data\OutputTxt | Out-Null
          Copy-Item dist\pdf-cleaner.exe bundle\
          if (Test-Path vendor) { Copy-Item vendor bundle\vendor -Recurse -Force }
          # run_exe.bat
          @"
          @echo off
          setlocal
          if not exist "data" mkdir "data"
          if not exist "data\Input" mkdir "data\Input"
          if not exist "data\Output" mkdir "data\Output"
          if not exist "data\OutputTxt" mkdir "data\OutputTxt"
          pdf-cleaner.exe ^
            -i data\Input -o data\Output --dpi 300 --text-dir data\OutputTxt ^
            --rgb-min 170 --rgb-max 250 --preview-mask --overlay ^
            --extract-text --ocr-lang por+eng
          echo.
          echo PDFs: %cd%\data\Output
          echo TXT : %cd%\data\OutputTxt
          pause
          endlocal
          "@ | Out-File -Encoding ascii bundle\run_exe.bat

      - name: Upload artifact (portable zip)
        uses: actions/upload-artifact@v4
        with:
          name: pdf-rgb-cleaner-portable
          path: bundle

  # =======================
  # 2) Docker image (local)
  # =======================
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build image
        run: |
          docker build -t pdf-rgb-cleaner:ci .
          docker image ls pdf-rgb-cleaner:ci

      # Para publicar em um registry (ex.: GHCR), descomente:
      # - name: Login GHCR
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      # - name: Tag & Push
      #   run: |
      #     docker tag pdf-rgb-cleaner:ci ghcr.io/${{ github.repository_owner }}/pdf-rgb-cleaner:latest
      #     docker push ghcr.io/${{ github.repository_owner }}/pdf-rgb-cleaner:latest
